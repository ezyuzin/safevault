using System;

namespace SafeVault.Security.Ciphers
{
    public class XorCipher : IDisposable, ICipher
    {
        private XorCipherKey _key;

        public XorCipher()
        {
            _key = new XorCipherKey(new byte[]
            {
                0x01, 0x49, 0x6b, 0xf3, 0xe9, 0x57, 0x5b, 0x00, 0x5e, 0xda, 0x32, 0xde, 0x0d, 0x78, 0x7f, 0x49,
                0x86, 0x8a, 0xd0, 0x67, 0x4c, 0x49, 0x4d, 0x4a, 0xa9, 0xe2, 0xc1, 0x76, 0xe2, 0xbf, 0x22, 0xa4,
                0xf6, 0xd8, 0x4b, 0x11, 0x85, 0xa3, 0x1e, 0x54, 0xd1, 0xa8, 0xa2, 0x7b, 0x8e, 0xae, 0xd9, 0x8b,
                0xf8, 0x71, 0xd8, 0x36, 0xdd, 0x89, 0xe1, 0xb6, 0xfb, 0x21, 0x49, 0x06, 0x95, 0xe3, 0x1d, 0x9e,
                0xb7, 0x8c, 0xe6, 0x34, 0x2d, 0x6e, 0xc3, 0xe1, 0x6b, 0x7b, 0x94, 0xa2, 0xa5, 0xd0, 0xba, 0xfa,
                0x09, 0x35, 0x7d, 0x70, 0xe6, 0xea, 0xc5, 0x6d, 0xf5, 0x93, 0x15, 0x64, 0x59, 0x17, 0xbe, 0xec,
                0x8b, 0x04, 0xc3, 0x01, 0xc7, 0xa4, 0x5e, 0x89, 0xad, 0xf5, 0xca, 0x61, 0xf4, 0x3e, 0x11, 0x2a,
                0x65, 0x4e, 0xfc, 0x5f, 0x66, 0xab, 0xb7, 0xcc, 0xc6, 0x79, 0x3d, 0x98, 0x59, 0x5f, 0x87, 0x53
            });
        }
        public XorCipher(byte[] key)
        {
            _key = new XorCipherKey(key);
        }

        public void Dispose()
        {
        }

        public byte[] Decrypt(byte[] data)
        {
            byte[] dec = new byte[data.Length];
            for (int i = 0; i < data.Length; i++)
            {
                dec[i] = (byte) (data[i] ^ _key.GetNext());
                _key.Shuffle(dec[i]);
            }
            return dec;
        }

        public byte[] Encrypt(byte[] data)
        {
            byte[] enc = new byte[data.Length];
            for (int i = 0; i < data.Length; i++)
            {
                enc[i] = (byte) (data[i] ^ _key.GetNext());
                _key.Shuffle(data[i]);
            }
            return enc;
        }

        public ICipher Clone()
        {
            var clone = new XorCipher();
            clone._key = _key.Clone();
            return clone;
        }

        public int BlockSize { get { return int.MaxValue; } }
    }
}